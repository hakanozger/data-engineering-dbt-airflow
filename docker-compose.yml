version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: analytics
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: ["postgres", "-c", "logging_collector=on", "-c", "log_statement=all"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      retries: 5
      start_period: 5s

  flask-api:
    build: ./flask-api
    container_name: flask_api
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://user:password@postgres:5432/analytics
    ports:
      - "5001:5001"
    volumes:
      - ./flask-api:/app

  airflow:
    image: apache/airflow:latest
    container_name: airflow
    restart: always
    depends_on:
      - postgres
      - dbt
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:password@postgres:5432/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__WEBSERVER__DEFAULT_USER: admin
      AIRFLOW__WEBSERVER__DEFAULT_PASSWORD: admin
      AIRFLOW__WEBSERVER__RBAC: True       # Enables RBAC (Role-Based Access Control)
      AIRFLOW_UID: 50000
      AIRFLOW_GID: 0
    ports:
      - "8080:8080"
    volumes:
      - ./airflow:/opt/airflow
      - /var/run/docker.sock:/var/run/docker.sock 
    entrypoint: /bin/bash
    platform: linux/amd64
    command: >
      -c "airflow db init &&
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
      airflow webserver & airflow scheduler"

  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:latest
    build: ./dbt
    container_name: dbt
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DBT_PROFILES_DIR: /root/.dbt
    volumes:
      - ./dbt/profiles.yml:/root/.dbt/profiles.yml
    entrypoint: ["/bin/bash", "-c", "sleep 10 && dbt debug"]
    platform: linux/amd64

volumes:
  postgres_data:
